// SPDX-License-Identifier: AGPL-3.0
// Feel free to change the license, but this is what we use

// Feel free to change this version of Solidity. We support >=0.6.0 <0.7.0;
pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

// These are the core Yearn libraries
import {
    BaseStrategy,
    StrategyParams
} from "https://github.com/LogETH/imports/blob/main/BaseStrategy.sol";

import {SafeMath} from "https://github.com/LogETH/imports/blob/main/SafeMath.sol";
import {SafeERC20} from "https://github.com/LogETH/imports/blob/main/SafeERC20.sol";
import {Address} from "https://github.com/LogETH/imports/blob/main/address.sol";
import {IERC20} from "https://github.com/LogETH/imports/blob/main/IERC20.sol";

// Import interfaces for many popular DeFi projects, or add your own!
//import "../interfaces/protocol/<Interface>.sol";

contract Strategy is BaseStrategy {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    constructor(address _vault) public BaseStrategy(_vault) {
        // You can set these parameters on deployment to whatever you want
        // maxReportDelay = 6300;
        // profitFactor = 100;
        // debtThreshold = 0;
        ETHwant = Oracle(0x773616E4d11A78F511299002da57A0a94577F1f4); // This is the ETHWANT oracle
        euler;
        want = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F); // This is want

        eToken = IeToken(euler.underlyingToEToken(address(want)));

        want.approve(address(euler), type(uint256).max);
    }

    // The token and platform:

    IeToken eToken;
    IEuler euler;

    // a chainlink oracle for ETH/want
    Oracle ETHwant; 

    // ******** OVERRIDE THESE METHODS FROM BASE CONTRACT ************

    function name() external view override returns (string memory) {

        return "StrategyEulerEToken";
    }

    function estimatedTotalAssets() public view override returns (uint256) {

        return eToken.balanceOfUnderlying(address(this));
    }

    function prepareReturn(uint256 _debtOutstanding) internal override returns(uint256 _profit, uint256 _loss, uint256 _debtPayment){
        // TODO: Do stuff here to free up any returns back into `want`
        // NOTE: Return `_profit` which is value generated by all positions, priced in `want`
        // NOTE: Should try to free up at least `_debtOutstanding` of underlying position

        _profit = eToken.balanceOfUnderlying(address(this)).sub(vault.debtOutstanding());

        eToken.withdraw(0, _profit);


        _loss = 0; // It is impossible to lose money from this stratagy, so loss is always zero.
        // (Unless euler gets hacked.. but then this vault will probably be the least of your concerns.)

        _debtPayment = _debtOutstanding; // _debtOutstanding 'want' is freed up from the underlying position 

        return (_profit, _loss, _debtPayment);
    }

    function adjustPosition(uint256 _debtOutstanding) internal override {

        want.transferFrom(address(vault), address(this), _debtOutstanding);       // Get want from vault
        eToken.deposit(0, _debtOutstanding);
    }

    function liquidatePosition(uint256 _amountNeeded)
        internal
        override
        returns (uint256 _liquidatedAmount, uint256 _loss)
    {
        // TODO: Do stuff here to free up to `_amountNeeded` from all positions back into `want`
        // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`
        // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`

        eToken.withdraw(0, _amountNeeded);

        uint256 totalAssets = want.balanceOf(address(this));
        if (_amountNeeded > totalAssets) {
            _liquidatedAmount = totalAssets;
            _loss = _amountNeeded.sub(totalAssets);
        } else {
            _liquidatedAmount = _amountNeeded;
        }
    }

    function liquidateAllPositions() internal override returns (uint256) {

        // https://docs.euler.finance/developers/getting-started/contract-reference#ieuleretoken
        eToken.withdraw(0, type(uint256).max); // max uint256 = full pool balance. 
        return want.balanceOf(address(this));
    }

    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary

    function prepareMigration(address _newStrategy) internal override {
        // TODO: Transfer any non-`want` tokens to the new strategy
        // NOTE: `migrate` will automatically forward all `want` in this strategy to the new one

        eToken.transfer(_newStrategy, eToken.balanceOf(address(this)));
    }

    // Override this to add all tokens/tokenized positions this contract manages
    // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)
    // NOTE: Do *not* include `want`, already included in `sweep` below
    //
    // Example:
    //
    //    function protectedTokens() internal override view returns (address[] memory) {
    //      address[] memory protected = new address[](3);
    //      protected[0] = tokenA;
    //      protected[1] = tokenB;
    //      protected[2] = tokenC;
    //      return protected;
    //    }
    function protectedTokens() internal view override returns(address[] memory){

        address[] memory protected = new address[](2);

        protected[0] = address(eToken); // Replace with the actual fcToken address please.
        
        return protected;
    }

    /**
     * @notice
     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)
     *  to `want` (using the native decimal characteristics of `want`).
     * @dev
     *  Care must be taken when working with decimals to assure that the conversion
     *  is compatible. As an example:
     *
     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),
     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)
     *
     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`
     * @return The amount in `want` of `_amtInEth` converted to `want`
     **/
    function ethToWant(uint256 _amtInWei) public view virtual override returns (uint256){
        // TODO create an accurate price oracle
        (,int price,,,) = ETHwant.latestRoundData();

        _amtInWei = _amtInWei.mul(uint(price)).div(10**8);

        return _amtInWei;
    }
}

interface Oracle{

    // Chainlink Dev Docs https://docs.chain.link/docs/
    function latestRoundData() external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);
}

// Yes, I know Rari and Comp are the same, but naming them differently made things easier

interface IEuler{

    // Euler Dev Docs https://docs.euler.finance/developers/getting-started/integration-guide
    function underlyingToEToken(address underlying) external view returns (address);
}

interface IeToken{

    // Euler Dev Docs https://docs.euler.finance/developers/getting-started/contract-reference#ieuleretoken
    function balanceOfUnderlying(address account) external view returns (uint);
    function deposit(uint subAccountId, uint amount) external;
    function withdraw(uint subAccountId, uint amount) external;
    function balanceOf(address account) external view returns (uint);
    function transfer(address account, uint amount) external view returns (bool);
}
