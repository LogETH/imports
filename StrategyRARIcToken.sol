// SPDX-License-Identifier: AGPL-3.0
// Feel free to change the license, but this is what we use

// Feel free to change this version of Solidity. We support >=0.6.0 <0.7.0;
pragma solidity 0.6.12;

// These are the core Yearn libraries
// These libraries are not loading properly in my instance of remix, I implemented them as best as I could.  <------------
import {
    BaseStrategy,
    StrategyParams
} from "@yearn/yearn-vaults/blob/main/contracts/BaseStrategy.sol";
import {
    SafeERC20,
    SafeMath,
    IERC20,
    Address
} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";

// Import interfaces for many popular DeFi projects, or add your own!
//import "../interfaces/<protocol>/<Interface>.sol";

contract Strategy is BaseStrategy {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    constructor(address _vault) public BaseStrategy(_vault) {
        // You can set these parameters on deployment to whatever you want
        // maxReportDelay = 6300;
        // profitFactor = 100;
        // debtThreshold = 0;
        ETHDAI = Oracle(0x773616e4d11a78f511299002da57a0a94577f1f4);

        want = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F); //This is DAI
        fcToken = Rari(0x0000000000000000000000000000000000000000); // Replace with the actual fcToken address please.
        cToken = Comp(0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643); // This is cToken

        //Nothing else needed here
    }

    // LOGIC RULES:

    // 1)  Conversions from DAI to cToken or fcToken require a decimal update (DAI has 18, cToken and fcToken have 8)
    //      DAI -> cToken (-10 decimals), cToken -> DAI (+10 decimals)
    //      Conversions from cToken to fcToken do not require a decimal update
    // 2)  All price oracles return the price conversion from the greater Currency to the lesser Currency in terms of value, 
    //      This means you multiply to go from Big -> Small, and divide to do the reverse.
    //      ETH -> DAI -> cToken -> fcToken (Biggest to Smallest)

    // The tokens:

    IERC20 want;
    Rari fcToken;
    Comp cToken;

    // cToken and fcToken are auto compounding by default, so this contract needs to track its profits itself using this variable
    uint StampBalance;
    // a chainlink oracle for ETH/DAI
    Oracle ETHDAI; 

    // ******** OVERRIDE THESE METHODS FROM BASE CONTRACT ************

    function name() external view override returns (string memory) {

        return "StrategyRARIcToken";
    }

    function estimatedTotalAssets() public view override returns (uint256) {

        // Add 46 decimals then divide (big to small) (rules 1 and 2 on line 40)
        return div(div(mul(fcToken.balanceOf(address(this)), 10e46), fcToken.exchangeRateCurrent()),cToken.exchangeRateCurrent());
    }

    function prepareReturn(uint256 _debtOutstanding) internal override returns(uint256 _profit, uint256 _loss, uint256 _debtPayment){
        // TODO: Do stuff here to free up any returns back into `want`
        // NOTE: Return `_profit` which is value generated by all positions, priced in `want`
        // NOTE: Should try to free up at least `_debtOutstanding` of underlying position

        _profit = sub(estimatedTotalAssets(), StampBalance); // _profit is in DAI
        fcToken.redeemUnderlying(div(mul(add(_profit, _debtOutstanding), cToken.exchangeRateCurrent()), 10e18)); // Multiply then remove 18 decimals (big to small, Rule 2)
        cToken.redeemUnderlying(add(_profit, _debtOutstanding));

        StampBalance = sub(estimatedTotalAssets(), _debtOutstanding);

        _loss = 0; // It is impossible to lose money from this stratagy, so loss is always zero.
        // (Unless compound gets hacked.. but then this vault will probably be the least of your concerns.)

        _debtPayment = _debtOutstanding; // _debtOutstanding 'want' is freed up from the underlying position 

        return (_profit, _loss, _debtPayment);
    }

    function adjustPosition(uint256 _debtOutstanding) internal override {

        DAI.transferFrom(vault, address(this), _debtOutstanding);       // Get DAI from vault
        DAI.approve(address(cToken), _debtOutstanding);
        cToken.mint(DAI.balanceOf(address(this)));                        // Deposit into compound
        cToken.approve(address(fcToken), cToken.balanceOf(address(this)));
        fcToken.mint(cToken.balanceOf(address(this)));                      // Deposit into rari

        if(StampBalance == 0){StampBalance = estimatedTotalAssets();}
        else{

            // Multiply then remove 36 decimals (Big to small)
            StampBalance = add(StampBalance, div(mul(mul(_debtOutstanding, fcToken.exchangeRateCurrent()), cToken.exchangeRateCurrent()), 10e36));
        }
    }

    function liquidatePosition(uint256 _amountNeeded)
        internal
        override
        returns (uint256 _liquidatedAmount, uint256 _loss)
    {
        // TODO: Do stuff here to free up to `_amountNeeded` from all positions back into `want`
        // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`
        // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`

        fcToken.redeemUnderlying(div(mul(_amountNeeded, (cToken.exchangeRateCurrent()), 10e18))); // Multiply then remove 18 decimals (big to small)
        cToken.redeemUnderlying(_amountNeeded); // redeem cToken for DAI

        StampBalance = sub(StampBalance, _amountNeeded);

        uint256 totalAssets = want.balanceOf(address(this));
        if (_amountNeeded > totalAssets) {
            _liquidatedAmount = totalAssets;
            _loss = _amountNeeded.sub(totalAssets);
        } else {
            _liquidatedAmount = _amountNeeded;
        }
    }

    function liquidateAllPositions() internal override returns (uint256) {
        fcToken.redeem(fcToken.balanceOf(address(this))); // redeem all fcToken for cToken
        cToken.redeem(cToken.balanceOf(address(this))); // redeem all cToken for DAI
        return want.balanceOf(address(this));
    }

    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary

    function prepareMigration(address _newStrategy) internal override {
        // TODO: Transfer any non-`want` tokens to the new strategy
        // NOTE: `migrate` will automatically forward all `want` in this strategy to the new one

        fcToken.transfer(_newStrategy, fcToken.balanceOf(address(this)));
    }

    // Override this to add all tokens/tokenized positions this contract manages
    // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)
    // NOTE: Do *not* include `want`, already included in `sweep` below
    //
    // Example:
    //
    //    function protectedTokens() internal override view returns (address[] memory) {
    //      address[] memory protected = new address[](3);
    //      protected[0] = tokenA;
    //      protected[1] = tokenB;
    //      protected[2] = tokenC;
    //      return protected;
    //    }
    function protectedTokens() internal view override returns(address[] memory){

        address[] memory protected = new address[](2);

        protected[0] = 0x0000000000000000000000000000000000000000; // Replace with the actual fcToken address please.
        
        return protected;
    }

    /**
     * @notice
     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)
     *  to `want` (using the native decimal characteristics of `want`).
     * @dev
     *  Care must be taken when working with decimals to assure that the conversion
     *  is compatible. As an example:
     *
     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),
     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)
     *
     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`
     * @return The amount in `want` of `_amtInEth` converted to `want`
     **/
    function ethToWant(uint256 _amtInWei) public view virtual override returns (uint256){
        // TODO create an accurate price oracle
        (,int price,,,) = ETHDAI.latestRoundData();

        _amtInWei = div(mul(_amtInWei, uint(price)), 10**8);

        return _amtInWei;
    }
}

interface Oracle{

    // Chainlink Dev Docs https://docs.chain.link/docs/
    function latestRoundData() external returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);
}

// Yes, I know Rari and Comp are the same, but naming them differently made things easier

interface Rari{

    // Rari Dev Docs https://docs.rari.capital/fuse/#general
    function mint(uint) external returns (uint);
    function redeem(uint) external returns (uint);
    function redeemUnderlying(uint) external returns (uint);
    function transferFrom(address, address, uint256) external;
    function transfer(address, uint256) external;
    function borrow(uint borrowAmount) external returns (uint);
    function repayBorrow(uint repayAmount) external returns (uint);
    function exchangeRateCurrent() external returns (uint);
    function balanceOf(address) external view returns(uint);
    function getAccountLiquidity(address account) external returns (uint, uint, uint);
    function borrowBalanceCurrent(address account) external returns (uint);
}

interface Comp {

    // Comp dev docs https://medium.com/compound-finance/supplying-assets-to-the-compound-protocol-ec2cf5df5aa#afff
    function mint(uint256) external returns (uint256);
    function exchangeRateCurrent() external returns (uint256);
    function supplyRatePerBlock() external returns (uint256);
    function redeem(uint) external returns (uint);
    function redeemUnderlying(uint) external returns (uint);
    function approve(address, uint256) external returns (bool success);
    function transferFrom(address, address, uint256) external;
    function transfer(address, uint256) external;
    function balanceOf(address) external view returns(uint);
}
